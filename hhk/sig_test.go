package sigoliboqs

import (
	"encoding/hex"
	"fmt"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

const libPath = "/usr/local/lib/liboqs.so"

func TestRoundTrip(t *testing.T) {

	sigs := []SigType{
		SigqTESLAI,
		SigqTESLAIIIspeed,
		SigqTESLAIIIsize,		
		//SigPicnicL1FS,
		//SigPicnicL1UR,
		//SigPicnicL3FS,
		//SigPicnicL3UR,
		//SigPicnicL5FS,
		//SigPicnicL5UR,
		//SigPicnic2L1FS,
		//SigPicnic2L3FS,
		//SigPicnic2L5FS,
	}

	//var message = []byte("Hello")
	//var b string
	s, err := LoadLib(libPath)
	require.NoError(t, err)
	defer func() { require.NoError(t, s.Close()) }()
			
	for _, sigAlg := range sigs {
		t.Run(string(sigAlg), func(t *testing.T) {

			s.SetRandomAlg(AlgNistKat)
			testSIG, err := s.GetSign(sigAlg)
			if err == errAlgDisabledOrUnknown {
				t.Skipf("Skipping disabled/unknown algorithm %q", sigAlg)
			}
			require.NoError(t, err)
			defer func() { require.NoError(t, testSIG.Close()) }()
			//fmt.Println("message")
			start := time.Now()
			publicKey, secretKey, err := testSIG.KeyPair()
			elapsed := time.Since(start)
			fmt.Printf("1. b) key-pair gen1  \n%s", elapsed)
			require.NoError(t, err)

			fmt.Println("GeneratedSecretkey")
			h := hex.EncodeToString(secretKey)
			fmt.Println(h)
		/*
				sk
				secretKey, err = hex.DecodeString(sk)
				if err != nil {
					panic(err)
				}

				pk := "10803034593BCB056ADBC60E5C547EE6AE19D1397677363B6BBE4CC58F718DAD2C31B95C138A07A94410050C29C4AC63C06D02325E353A1A52DB2173F75A7224F917FFD55A45D65E97253A239F5AAE9E619F1270636975C6D213AE1E52C0C835E308391A814AEF713C4FF346EB2E3380976C576057ABCA20DFC93526E3141ACE78D22449785772596A2E893C60C8F00190B03038E946ADAB5D8B5A79399E5180771C862C61B02676BC9B1147F7461372723E820E1706472BBC29D2C9199CF047B7D34267662E839C47FD056FB1B178E42A62E5F52DFC3F4FE6805FB4E54AAF443E4AF33F4FE64DDC1E5E2CBC506278444F3619F4E15CC29974F1987D628B7F45045DFF5A3D19FA134E105EDA9E7359C44BCF0A69CECE3F12386D1260434D3F4F4D117F54673F3D3037A5204901FC4A7DF45628985FEBFE5DFC801BC7C4561AE02BE6FF4CA7352BA8DC7CA3172C042140C6EE382BE7387B6A73696304402725BC086253CA0D97C837318F13741A6EB9A60547F773CE5125ECCB70D5E252A0AF6B809754EA9836CC194285CF20748450ADC332C7134F32BE272C705B051728223280950E5F0AA1135ABC5EDE7344CDD449854145ED70101D7941A0C16B01287D4A680A9B67029BED3E32672998C548E8AB1A704E4FF37547CEF601704C603733545D6363A93675A0727C4D1C6E45C22FCD9843ECAD291B3D0ABFA92665C932A4547B70A8185C02223C5A286DF165DBB05A50532E4AD878DDA75AA41F6150E20E39A15A5FDF353C237CFC1F6E03193E528E27A2131E9CE63135E318E0236FA6737F9B95119D993EADE51E16AD7EED7019AF5F74CA94314F9A664ED951914F7BC6B74ED86A27F747306A472DD034559D0731B1D80DFD8A08CDC94E10943D33FC775C4743B7EF0D9C3F3C74AB49BC757B9C3B30BE963666D31AA0AA7FC3855A86FB1A842B2048EE07C30B165F5C53D33B34D23160CFAF44276E66DBA04FB2B169D9DB6E9EA072B0795A0347342A625285A422F0BF24AEEF1C03F7166E2010DABE0891482CDEFE7477A3611AB014D28847F58B5BF8212AB5466012214B9A366EAB493D4A6315D00345C4B00B3B690F886D467CA85335994E35616AACA55A207E3CE66A107E0A3DBB4A683E39454B3E567D5C432B867044B2771B5B444A0A22D835395852545E0B12CF7B03D6C60582C416380018447A4989A656FA1C436B303B4E984DC4A402E9BA7808A778D8513DD382403D053558F91BD63B03A14D760D334C5DEF4F0A64193B6E1B39A37821D264B3E92E830E29EFE939121102405504297532DD554FF7B32C34AB699C0F434337713E9A3305CF0E2F2356052A3AAC090D3C8B68A5FA41119C106FA9242B054E65611463BA6D62AA54AFA71CB34E2CE1CF00180A2CF22F5B3F4C2C143C0A15B41F2CEF6469375AF41378FEB96332292D0FF93A27D52A4E2E161BE24F50FF262CEC393FDC388687164DDA61291C4880404ABBD103CEAE4CA5FB72D20768B65A2E3C7E77316E528E084A77ED6AF6FD15824D75B49A1F72275B9F0162C4117E06F316D5C7534116213AE54E3C1801DAB85D22F22F83A32F775E1674141463184D6EEA2986B47EDCC632622F45244A66D4D02B95072A466C0CC1F434E8EF6BA68D0C786B288ABD6CBDAD139F3C1490510552827DD9F4056CE116E4151B67000A0952560C5D55CC885CEF221566812242624BB97D2E948711E0BB2E933E80B2A5548FB6355FA4600FF04319E350193E61C2B411201547A1E778F450753874677C6841AD00175CBD5F65A403DB7E5531552516552983BC58A24C046E0E07DF2A2C16E90122474FA9B724F1A4789247150BD01BF2FE6B1FC67E64427478E33D765C09BEBB6D63CB3A39C3655CD22D39443D00E154096158199B519E8A23DF9A7278673A64B20CFC7927106D7133114E6BA61C4AD67DBCA845F1381B7D122B356D5F2F8C72C7CA02E0A42EAE865CA27436F3A6405B0E2E4C1B0796772363DE5D3AAA69577B6ED4747E68764017AA26B2E06D6518430D5304894039FD3555BCCC1598811A3AB75D39AF7B55403F558C3B5D7D505CC933F2275B90AB5A5AF83D92BD4623D76AD2157E98FC7AB8A14FB7006C055E3B97AD2568C016BDD529D633315AEB3272D511FC9C2DFEEA15F670497EA30AB40C4DA8723E0FE51334242A478B20370E3968D57C7CF0039CFA449D775C1FCE3E61842E1D090AF6DD0646B00D3AC41B062B6E9A2E6010281C00E9376E2B1EDF2F54E7A220A42A2551692B53F736A38C2F0CC26D2BC125081C802AE77FF6BC4D93052524DF4A952536289D61625F0B8CF834F6823CF4CF705F465C2D766AC1032F0D1B58AC6A1E519118FD1556DF417C578E16DD8B2F483569077431AF645266D35477CF7433490841355B63304178902958014804A73F03454D89CB6E8F2B38921C7DD82F2F2EC73DFCE176FB5E607A8443BD4B7F85E54893FA329B55112EC26AB886711B4E509715583CDA660D5B2E5BA07B6B530758731219B33D2F9A4DE41D46B7AD608E58242AA316296A02519448001F610A8043F4CD73F6443564B76BD27972550F0F56870135314C4BA801B29E50FF21540FAD643D0859D6C969409A1451E0334C3C3FC0FC04D1C32CE3BA5C2A5965522B5A79661C43B741AA30403C703D644B2EB2F918DBB93AD90F3FFB1B0367313472E1442E3312CE905B42BF50C07D5CEC7B724B392674E64661973CB8AF39DA37571C6840509803A8C00909DC1CDF0A02EC4C08BA604D7E57155D1827A4E87B263B3D423E51B3EF684BED510FBD722D694754F34E05B0420F7A109BBD40B6AF3770632240A141771B5AB44B175BF4793DAC1AC34E7253706E64B559DBF720B00A69ED862D29D803E93777192E6F194250458D0DF08104BFBC105B36037D610CE90D7C213760DE6666E5E019106D2482591C70E35A16A31DA7261745EF6A8B2D1F611C2EE8AD749FE1188F7C3D40D726197877680646B2AA39C7A83A689505FF2E12F3AE6EE3963FF7442890E11C5E2F07B45743D0703C6D3B53A8C2066B910CA77E795E2462B36B6A08AF17193950F961419E0D07351366A0750757EE254F6951BBBF7DA1FD21F31520B6D944317048E9B31D559A68E35A572D125A1D0707733E1A11FC255BEF37DC9F2BD6301B56671B6408593E6B07F95A4D421117A99C63B14306A2D729C7964E890D75D4EA1077EC6DEE1F6D82DC261B297DF860265CE94D5A587CC4F0551CA26A14611829EB723A286E7E7048A46A743411470B54567F9E08EE422AB4814ED4744385B94D53A12826730408902A0B51369AE459E7405CB7B64B8FDD61DC9C547C3F1E83620820AC4A8D395A32C8267BF113E0895D63A437E94B787C96494F4F05BC8A7E6B7E13414A599512616B8C154A283485BA310E8602FDEC075E8243AA5E66A49355F2E42B497E2BD9D676B506537BBE54442C772F7D418AF933C4837AE3BA2A7EF519E74E2167071252286F0E851D477B481FDE6AED891D4A3F6F78C3296ACC3424635E4A3266468D3AD09A0CBA1F67345C7F4ACE3EC3DB2D910E07151B0FE5D752C18B4E2C711903B51623A30600476FF0A535F88F179A6B78DB1634D3323B7E6245ED883CE0864D732C5EE87E5DFD3612DF040ED53F171AFE25C00C6066206D63AB3B3AEA635C5031077215CE2B4E1A2B1ECDFD0B0F9355362D6907B34340A864AC6411D1657249B7218C392740E13AD8C500345B33ED1104E09E0803947307806664590EC5F7390D6F6D4BA615D81A6664285CF7F554BEB22A3E981529CD3472C03683BE0F772F468A5D5747591032DF281B304EF03580EF91644922280769321B872246937C0F9B61A0305EFACE65CF5B1CCF9F15D6991E0D946D49D33AEA7A3CC65B25215137857A044BEE48A2ED24A06731C6F51EE6C0033A272F37E765B15F02278C73F2C6648C7B70F4D628F15670554B3D410F3881234396B10CE9224ED41B809D9A7416AB1A0AEB67029E2C00FE2063594CC873326A49274FD972269562B9141294E439EC0B4E993E62EF574C8DF36197F612C0876FB00775AE8042B2116B9A24765AF46E3EC204CCE07DB73A80F0DC7832377A7DF0663ADB3D03584588F57E80AB7907951136231730001F1BA3383FED7FE46D6168935202CE12868E74175516E73D052D9017B659587C446125C819DDAC4574830D8C555E8D9314A5047F3A71105A603C69F27B453D673A277181D60B6B6606CE20060C8D36730C5D3C182E5FF72DCCA0667A510C94C53D993B45D74F4322FC598F5363F0301A6F814A8B372F6EE26AB77D47E9454589D30690C02334D90267EE6D6D9E55D10E74878744575A1FF7EBAD2216F8191A1D69C65934805D370D1857876CBA28397976303D316AAD13"
				publicKey, err = hex.DecodeString(pk)
				if err != nil {
					panic(err)
				}
			*/
			///		fmt.Println("publickey")
			///	h1 := hex.EncodeToString(publicKey)
			//	/fmt.Println(h1)

			//fmt.Println("message")
			msg := "12"
			message, err := hex.DecodeString(msg)
			if err != nil {
				panic(err)
			}
			//I think the fuction below takes the generatedsecretKEy and not the pre-defined one as the signature changes everytime I run.But the o/p in (***)is the pre-defined one. It's contradicting.
			signature, err := testSIG.Sign(secretKey, message)
			require.NoError(t, err)

			fmt.Println("message")
			///	h2 := hex.EncodeToString(message)
			//	fmt.Println(h2)
			//(***)
			///	fmt.Println("Secretkey")
			///h = hex.EncodeToString(secretKey)
			///	fmt.Println(h)

			fmt.Println("signature")
			//h3 := hex.EncodeToString(signature)
			//fmt.Println(h3)

			result, err := testSIG.Verify(message, signature, publicKey) //assert is of type bool
			require.NoError(t, err)
			///fmt.Println("message")
			//b := string(secretKey[:])
			//fmt.Println(b)
			//b := string(secretKey[:])
			//fmt.Println(secretKey)
			//hex.EncodeToString()

			assert.Equal(t, result, true)
		})
	}
	
}


func TestBadLibrary(t *testing.T) {
	//	fmt.Println("message-6")
	_, err := LoadLib("bad")
	require.Error(t, err)
	require.Contains(t, err.Error(), "failed to load module")
}

func TestReEntrantLibrary(t *testing.T) {
	//fmt.Println("message-5")
	s1, err := LoadLib(libPath)
	require.NoError(t, err)
	defer func() { require.NoError(t, s1.Close()) }()

	s2, err := LoadLib(libPath)
	require.NoError(t, err)
	defer func() { require.NoError(t, s2.Close()) }()
}

func TestLibraryClosed(t *testing.T) {
	//fmt.Println("message-4")
	s, err := LoadLib(libPath)
	require.NoError(t, err)
	require.NoError(t, s.Close())

	const expectedMsg = "library closed"

	t.Run("GetSIG", func(t *testing.T) {
		//fmt.Println("message-3")
		_, err := s.GetSign(SigPicnicL1FS)
		require.Error(t, err)
		assert.Contains(t, err.Error(), expectedMsg)
	})

	t.Run("Close", func(t *testing.T) {
		//fmt.Println("message-2")
		err := s.Close()
		require.Error(t, err)
		assert.Contains(t, err.Error(), expectedMsg)
	})
}

func TestSIGClosed(t *testing.T) {
	//fmt.Println("message-1")
	s, err := LoadLib(libPath)
	require.NoError(t, err)
	defer func() { require.NoError(t, s.Close()) }()

	testSIG, err := s.GetSign(SigqTESLAI)
	require.NoError(t, err)

	require.NoError(t, testSIG.Close())

	t.Run("KeyPair", func(t *testing.T) {
		fmt.Println("message0")
		_, _, err := testSIG.KeyPair()
		assert.Equal(t, errAlreadyClosed, err)
	})

	t.Run("Sign", func(t *testing.T) {
		fmt.Println("message1")
		_, err := testSIG.Sign(nil, nil)
		assert.Equal(t, errAlreadyClosed, err)
	})

	t.Run("Verify", func(t *testing.T) {
		fmt.Println("message2")
		_, err := testSIG.Verify(nil, nil, nil)
		assert.Equal(t, errAlreadyClosed, err)
	})

	t.Run("Verify", func(t *testing.T) {
		fmt.Println("message3")
		err := testSIG.Close()
		assert.Equal(t, errAlreadyClosed, err)
	})
}

func TestInvalidSIGAlg(t *testing.T) {
	fmt.Println("message4")
	s, err := LoadLib(libPath)
	require.NoError(t, err)
	defer func() { require.NoError(t, s.Close()) }()

	_, err = s.GetSign(SigType("this will never be valid"))
	assert.Equal(t, errAlgDisabledOrUnknown, err)
}

func TestLibErr(t *testing.T) {
	fmt.Println("message5")
	err := libError(operationFailed, "test%d", 123)
	assert.EqualError(t, err, "test123")
}
